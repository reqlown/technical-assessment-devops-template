on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12.8"]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.12.8"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: false
          virtualenvs-in-project: false
          installer-parallel: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Install Ruff
        run: poetry add --dev ruff==0.4.10

      - name: Lint with Ruff
        run: poetry run ruff check .
        continue-on-error: false

      - name: Install Test Dependencies
        run: python -m pip install pytest pytest-cov

      - name: Run Unit Tests
        run: poetry run pytest --cov-report term-missing --cov=lambda_app/ tests/
        continue-on-error: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Check if k3d is installed
        run: |
          if ! command -v k3d &> /dev/null
          then
            echo "k3d not found, installing..."
            curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
          else
            echo "k3d is already installed"
          fi

      - name: Start K3D Cluster
        run: |
          k3d cluster create my-cluster \
            --registry-create my-cluster:5000 \
            -p 5432:5432@loadbalancer

      - name: Verify Cluster is Running
        run: k3d cluster list

      - name: Build Docker Image
        run: docker build -t my-lambda-image .

      - name: Tag Docker Image
        run: docker tag my-lambda-image my-cluster:5000/my-lambda-image

      - name: Push Image to Internal Registry
        run: docker push my-cluster:5000/my-lambda-image

      - name: Push Image to Internal Registry
        run: docker push my-cluster:5000/my-lambda-image

      - name: Apply Kubernetes Manifests
        run: kubectl apply -f k8s/

      - name: Verify Pods and Services
        run: |
          kubectl get pods
          kubectl get services

      - name: Run Docker Container
        run: docker run -d -p 3001:8080 --name lambda-container my-lambda-image

      - name: Wait for container to Start
        run: sleep 6

      - name: Verify Container is Running
        run: docker ps

      - name: Invoke Lambda Function with curl
        run: |
          RESPONSE=$(curl -s -d @events/event.json http://localhost:3001/2015-03-31/functions/function/invocations)
          echo "Response: $RESPONSE"
          echo "$RESPONSE" | grep '"statusCode": 200' || (echo "Lambda function test failed!" && exit 1)
      
      - name: Stop and remove container
        if: always()
        run: docker stop lambda-container && docker rm lambda-container